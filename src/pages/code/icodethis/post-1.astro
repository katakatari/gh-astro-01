---
import Icon, { type IconName } from "@components/ui/icon";
import Layout from "@layouts/Layout.astro";
import { getRandomIntInclusive } from "@lib/utils";
const sample = "https://icodethis.com/images/projects/users_card.png";

const totalImages = 5;
const hasMid = false;

const imagesOnCircle = totalImages - Number(hasMid);
const images = Array.from({ length: totalImages }).map(
  (v) => (v = "https://i.pravatar.cc/300?img=" + getRandomIntInclusive(10, 50)),
);

const stacks = ["html", "tailwind-CSS", "typescript"] as const;
---

<Layout title={`Katakatari | Users Card #1`}>
  <main
    class="container prose flex min-h-main max-w-5xl flex-col items-center py-10 prose-headings:text-background"
  >
    <header
      class="prose-headings:text-foreground prose-a:text-foreground prose-a:no-underline prose-a:hover:text-primary prose-a:hover:underline"
    >
      <h2>
        Users Card #1 | <a
          href="https://icodethis.com/modes/design-to-code/501/submissions"
          target="_blank"
          rel="noopener noreferrer">iCodeThis</a
        >
      </h2>
    </header>

    <div class="flex w-full flex-col justify-between gap-8 md:flex-row">
      <!-- Card -->
      <section
        class="flex max-w-md flex-col items-center rounded-md bg-foreground p-6 text-background shadow-lg"
      >
        <div
          id="radial-images"
          class="relative left-0 top-0 m-10 aspect-square w-60 before:absolute before:h-[calc(100%_-_2px_*_2)] before:w-[calc(100%_-_2px_*_2)] before:rounded-full before:border-4 before:border-indigo-400 before:content-['']"
        >
          {
            images.map((image) => (
              <img
                src={image}
                class="absolute left-1/2 top-1/2 m-[calc(-100px_/_2)] aspect-square w-24 break-words rounded-full bg-indigo-400 p-1 transition-all duration-300 ease-linear"
              />
            ))
          }
        </div>
        <div class="max-w-xs text-center">
          <h4>Looking for more inspiration&quest;</h4>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis
            magnam optio cumque facere modi ullam cum dignissimos.
          </p>
        </div>
        <button
          class="rounded-full bg-indigo-400 px-10 py-4 font-semibold uppercase text-neutral-50"
        >
          See Featured Creatives
        </button>
      </section>

      <!-- Stacks -->
      <section
        class="h-48 min-h-fit w-full rounded-md border-4 border-primary py-10 text-center text-foreground prose-headings:text-foreground md:max-w-96"
      >
        <header>
          <h2 class="m-0">Stacks</h2>
        </header>
        <ul class="grid list-none grid-cols-2 p-0 md:grid-cols-3">
          {
            stacks.map((stack) => (
              <li class="flex flex-col items-center capitalize">
                {stack.split("-").join(" ")}
                <Icon name={stack.split("-")[0] as IconName} />
              </li>
            ))
          }
          <li class="text-center prose-a:text-foreground">
            Images by <br />
            <a href="https://i.pravatar.cc">Pravatar</a>
          </li>
        </ul>
      </section>
    </div>

    <!-- Example -->
    <section class="text-center text-neutral-50 prose-headings:text-foreground">
      <h2>Example</h2>
      <img src={sample} alt="" class="object-cover" height="600" />
    </section>
  </main>
</Layout>

<script is:inline define:vars={{ imagesOnCircle, hasMid, images }}>
  const getRandomIntInclusive = (min, max) => {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled); // The maximum is inclusive and the minimum is inclusive
  };
  let angle = 360 - getRandomIntInclusive(1, 360);
  const radial = document.querySelector("#radial-images");
  const circles = radial.querySelectorAll("img");
  const dangle = 360 / circles.length;

  const updatePositions = () => {
    let currentAngle = angle;
    for (const circle of circles) {
      currentAngle += dangle;
      circle.style.transform = `rotate(${currentAngle}deg) translate(${radial.clientWidth / 2}px) rotate(-${currentAngle}deg)`;
    }
  };

  updatePositions();

  let animationFrameId;
  const animate = () => {
    angle += 0.05; // Increase angle by 1 degree every second
    updatePositions();
    animationFrameId = requestAnimationFrame(animate);
  };

  radial.addEventListener("mouseover", () => {
    animationFrameId = requestAnimationFrame(animate);
  });

  radial.addEventListener("mouseout", () => {
    cancelAnimationFrame(animationFrameId);
  });
</script>
